name: Deploy Dockerhub

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Restore Maven Package
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('/*.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t meshackyaro/firstscript:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push meshackyaro/firstscript:${{ github.sha }}

      - name: Connect to EC2 and Deploy
        env:
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          PEM_KEY: ${{ secrets.PEM_KEY }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          # Write the PEM key to a file
          echo "$PEM_KEY" > cloudkeypair.pem
          chmod 400 cloudkeypair.pem

          # SSH into the EC2 instance and deploy the application
          ssh -o StrictHostKeyChecking=no -i cloudkeypair.pem ubuntu@$EC2_PUBLIC_IP << 'EOF'
          
          # Update package lists
          sudo apt-get update
          
          # Check and install Docker if not present
          if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce
              sudo systemctl start docker
              sudo systemctl enable docker
          else
              echo "Docker is already installed."
          fi
          
          # Stop and remove existing MySQL container if it exists
          if [ "$(sudo docker ps -q -f name=cloudproject-mysql)" ]; then
              echo "Stopping and removing existing MySQL container..."
              sudo docker stop cloudproject-mysql
              sudo docker rm cloudproject-mysql
          fi
          
          # Run a new MySQL container
          echo "Starting a new MySQL container..."
          sudo docker run -d --name cloudproject-mysql -e MYSQL_ROOT_PASSWORD=$MYSQL_PASSWORD -e MYSQL_DATABASE=cloud_db -p 3307:3306 mysql:latest
          
          # Pull and run your application container
          echo "Pulling the latest application image..."
          sudo docker pull meshackyaro/firstscript:${{ github.sha }}
          sudo docker stop cloudproject-app || true
          sudo docker rm cloudproject-app || true
          echo "Starting application container..."
          sudo docker run -d --name cloudproject-app --link cloudproject-mysql:cloudproject-mysql -p 8088:8088 meshackyaro/firstscript:${{ github.sha }}
          EOF

      - name: Cleanup
        if: always()
        run: rm -f cloudkeypair.pem  # Securely remove the PEM file
